#!/usr/bin/env python

""" Fetch Apache stats via mod_status and send to Zabbix
By Paulson McIntyre
Patches by:
Zach Bailey <znbailey@gmail.com>
Dale Bewley <dale@bewley.net>
Martijn van Maurik <git@vmaurik.nl>

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

import urllib2, base64
from argparse import ArgumentParser as Parser
import os
import StringIO
import csv
import sys
import logging, logging.handlers
from subprocess import Popen, PIPE, STDOUT

def setLogLevel(loglevel):
    """
    Setup logging.
    """

    numeric_loglevel = getattr(logging, loglevel.upper(), None)
    if not isinstance(numeric_loglevel, int):
        raise ValueError('Invalid log level: "%s"\n Try: "debug", "info", "warning", "critical".' % loglevel)

    program = os.path.basename( __file__ )
    logger = logging.getLogger( program )
    logger.setLevel(numeric_loglevel)

    return logger

def zbx_fail(err):
    logger.critical("%s", err)
    print "ZBX_NOTSUPPORTED"
    sys.exit(1)

def fetchURL(url, user = None, passwd = None):
    """ Return the data from a URL """

    request = urllib2.Request(url)

    if user and passwd:
        base64string = base64.encodestring('%s:%s' % (user, passwd)).replace('\n', '')
        request.add_header("Authorization", "Basic %s" % base64string)

    try:
        conn = urllib2.urlopen(request)
        data = conn.read()
        conn.close()
    except:
        raise

    return data

def zabbix_sender(payload, agentconfig = None, zabbixserver = None, zabbixport = 10051, senderloc = '/usr/bin/zabbix_sender' ):
    logger.debug('sendValues: %s' % payload)
    sender_command = []
    result = 0
    err = ''

    if not (os.path.exists(senderloc)) or not (os.access(senderloc, os.X_OK)):
        logger.error("%s not exists or not executable" %(senderloc))
        raise Exception("%s not exists or not executable" %(senderloc))

    else:
        # must have a config file OR have hostname, and server name
        if agentconfig is not None:
            logger.debug('sending to server in agent config %s' % agentconfig)
            sender_command = [ senderloc, '-vv', '--config', agentconfig, '--input-file', '-' ]
        else:
            if zabbixserver is not None:
                logger.debug('sending to server %s:%s' % (zabbixserver, zabbixport))
                sender_command = [ senderloc, '-vv', '--zabbix-server', zabbixserver, '--port', str(zabbixport), '--input-file', '-' ]
            else:
                logger.error('must specify agent configuration or server name to call zabbix_sender with')

        try:
            p = Popen(sender_command, stdout = PIPE, stdin = PIPE, stderr = PIPE)
            out, err = p.communicate( input = payload )
            ret = p.wait()
            result = 1
        except Exception, e:
            err = "%s\nFailed to execute: '%s'" % (e, " ".join(sender_command))
        finally:
            if ret != 0:
                raise Exception("error returned from %s! ret: %d, out: '%s', err: '%s'" % (sender_command[0], ret, out.strip('\n'), err.strip('\n')))

    return result

def clean(string, chars):
    for i in chars:
        string = string.replace(i, '')

    return string

def parse(data, version):
    """ Parse the CSV file into a dict of data
    """
    mapping = {
        "_":"Waiting for Connection",
        "S":"Starting up",
        "R":"Reading Request",
        "W":"Sending Reply",
        "K":"Keepalive (read)",
        "D":"DNS Lookup",
        "C":"Closing connection",
        "L":"Logging",
        "G":"Gracefully finishing",
        "I":"Idle cleanup of worker",
        ".":"Open slot with no current process",
    }

    # Handle post-2.4.13 status format
    if version >= '2.4.13':
        # First remove server name on first line
        data = data.splitlines(False)
        data = data[1:]
        # Then remove lines with dates (and more than : delimiter in it)
        lines=[]
        for l in data:
            if l.startswith('Server Built'):
                continue
            if l.startswith('CurrentTime'):
                continue
            if l.startswith('RestartTime'):
                continue
            if l.startswith('TLSSessionCacheStatus'):
                continue
            lines.append(l)

        data = "\n".join(lines)

    # Clean out certain chars
    replace = '() '
    csvobj = csv.reader(StringIO.StringIO(data), delimiter = ":", skipinitialspace = True)
    ret = {}

    for (key, val) in csvobj:
        if key == 'Scoreboard':
            sb = {
                "Waiting for Connection":0,
                "Starting up":0,
                "Reading Request":0,
                "Sending Reply":0,
                "Keepalive (read)":0,
                "DNS Lookup":0,
                "Closing connection":0,
                "Logging":0,
                "Gracefully finishing":0,
                "Idle cleanup of worker":0,
                "Open slot with no current process":0,
            }
            for i in val:
                sb[mapping[i]] += 1

            ret[key] = sb
        else:
            ret[key] = val

    ret2 = {}

    for (key, val) in ret.items():
        if key == "Scoreboard":
            for (key, val) in val.items():
                ret2[clean(key, replace)] = val
        else:
            ret2[clean(key, replace)] = val

    return ret2
def get_opts():
    parser = Parser(
        #        usage = "%prog [-z <Zabbix hostname or IP>] [-o <Apache hostname or IP>]",
        version = "%(prog)s version v0.3",
        prog = os.path.basename(__file__),
        description = """This program gathers data from Apache's 
built-in status page and sends it to 
Zabbix. The data is sent via zabbix_sender. 
Author: Paulson McIntyre (GpMidi)
License: GPLv2
                        """,
    )

    parser.add_argument(
        "-V",
        "--verbose",
        action = "store_true",
        dest = "verbose",
        default = False,
        help = "output verbosity",
    )
    parser.add_argument(
        "-D",
        "--debug",
        action = "store_true",
        dest = "debug",
        default = False,
        help = "print debug information. (default: %(default)s)",
    )
    parser.add_argument(
        "-o",
        "--host",
        action = "store",
        dest = "host",
        default = "127.0.0.1",
        help = "host to connect to. (default: %(default)s)",
    )
    parser.add_argument(
        "-p",
        "--port",
        action = "store",
        type = int,
        dest = "port",
        default = 80,
        help = "port to connect on. (default: %(default)s)",
    )
    parser.add_argument(
        "-t",
        "--path",
        action = "store",
        dest = "path",
        default = "server-status",
        help = "path to connect on. (default: %(default)s)",
    )
    parser.add_argument(
        "-r",
        "--proto",
        action = "store",
        dest = "proto",
        default = "http",
        help = "protocol to connect on: http or https. (default: %(default)s)",
    )
    parser.add_argument(
        "-z",
        "--zabbixserver",
        action = "store",
        #        type = "string",
        dest = "zabbixserver",
        default = "localhost",
        help = "zabbix trapper hostname",
    )
    parser.add_argument(
        "-u",
        "--user",
        action = "store",
        dest = "user",
        default = None,
        help = "HTTP authentication user to use when connection. (default: %(default)s)",
    )
    parser.add_argument(
        "-a",
        "--passwd",
        action = "store",
        dest = "passwd",
        default = None,
        help = "HTTP authentication password to use when connecting. (default: %(default)s)",
    )
    parser.add_argument(
        "-s",
        "--sender",
        action = "store",
        dest = "senderloc",
        default = "/usr/bin/zabbix_sender",
        help = "location to the zabbix_sender executable. (default: %(default)s)",
    )
    parser.add_argument(
        "-q",
        "--zabbixport",
        action = "store",
        type = int,
        dest = "zabbixport",
        default = 10051,
        help = "zabbix port to connect to. (default: %(default)s)",
    )
    parser.add_argument(
        "-c",
        "--zabbixsource",
        action = "store",
        dest = "zabbixsource",
        default = "localhost",
        help = "zabbix host to use when sending values. (default: %(default)s)",
    )
    parser.add_argument(
        "--config",
        action = "store",
        dest = "agentconfig",
        default = None,
        help = "zabbix agent config to derive Hostname and ServerActive from. (default: %(default)s)",
    )
    parser.add_argument(
        "--status-version",
        action = "store",
        choices = ["default", "2.4.13"],
        dest = "statusvers",
        default = "default",
        help = "version of the Apache status to parse, `default' or `2.4.13' since status output changed with Apache 2.4.13. (default: %(default)s)",
    )
    parser.add_argument(
        "-l",
        "--url",
        action = "store",
        dest = "url",
        default = None,
        help = "override the automatically generated URL with one of your own",
    )

    opts = parser.parse_args()

    if opts.url and (opts.port != 80 or opts.proto != "http"):
        parser.error("Can't specify -u with  -p or -r")
    if not opts.url:
        opts.url = "%s://%s:%s/%s?auto" % (opts.proto, opts.host, opts.port, opts.path)

    return opts

def main():
    opts = get_opts()

    if opts.verbose:
        log_handler = logging.StreamHandler(sys.stderr)
    else:
        log_handler = logging.handlers.SysLogHandler('/dev/log')

    if opts.debug:
        setLogLevel('debug')

    logger.addHandler(log_handler)

    result = 0

    try:
        server_status = fetchURL(opts.url, user = opts.user, passwd = opts.passwd)
    except Exception as e:
        zbx_fail('failed to read server-status: %s' % e)

    try:
        data = parse( data = server_status, version = opts.statusvers )
    except Exception as e:
        zbx_fail('failed to parse server-status: %s' % e)

    payload = ""

    """ To fix issues with newer zabbix versions use only these keys
    """
    validkeys = [
        'BytesPerReq',
        'BytesPerSec',
        'CPULoad',
        'ReqPerSec',
        'TotalAccesses',
        'TotalkBytes',
        'Uptime',
        'BusyWorkers',
        'Closingconnection',
        'DNSLookup',
        'Gracefullyfinishing',
        'IdleWorkers',
        'Idlecleanupofworker',
        'Keepaliveread',
        'Logging',
        'Openslotwithnocurrentprocess',
        'ReadingRequest',
        'SendingReply',
        'Startingup',
        'WaitingforConnection',
    ]

    if opts.agentconfig:
        # agent check; assume hostname from zabbix agent config
        for key, val in data.items():
            if not key in validkeys:
                continue

            payload += "-\tapache[%s]\t%s\n" % (key, val)

        try:
            result = zabbix_sender(
                payload     = payload,
                agentconfig = opts.agentconfig,
                senderloc   = opts.senderloc
            )
        except Exception as e:
            zbx_fail('failed to send parsed data: %s' % e)
        else:
            # return value for apache.status item
            print result

    else:
        # cron or remote check; hostname may be distinct from host running the check
        for key, val in data.items():
            if not key in validkeys:
                continue

            payload += "%s apache[%s] %s\n" % (opts.zabbixsource, key, val)

        try:
            result = zabbix_sender(
                payload      = payload,
                zabbixserver = opts.zabbixserver,
                zabbixport   = opts.zabbixport,
                senderloc    = opts.senderloc )

        except Exception as e:
            zbx_fail('failed to send parsed data: %s' % e)

if __name__ == "__main__":
    loglevel = 'critical'
    logger   = setLogLevel(loglevel)
    main()
